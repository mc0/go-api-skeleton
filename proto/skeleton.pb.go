// Code generated by protoc-gen-go.
// source: skeleton.proto
// DO NOT EDIT!

/*
Package grpc_skeleton is a generated protocol buffer package.

It is generated from these files:
	skeleton.proto

It has these top-level messages:
	Object
*/
package grpc_skeleton

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// An Object that contains an id and name
type Object struct {
	Id   int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *Object) Reset()                    { *m = Object{} }
func (m *Object) String() string            { return proto.CompactTextString(m) }
func (*Object) ProtoMessage()               {}
func (*Object) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Object) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Object) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Object)(nil), "grpc_skeleton.Object")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Skeleton service

type SkeletonClient interface {
	GetObject(ctx context.Context, in *Object, opts ...grpc.CallOption) (*Object, error)
}

type skeletonClient struct {
	cc *grpc.ClientConn
}

func NewSkeletonClient(cc *grpc.ClientConn) SkeletonClient {
	return &skeletonClient{cc}
}

func (c *skeletonClient) GetObject(ctx context.Context, in *Object, opts ...grpc.CallOption) (*Object, error) {
	out := new(Object)
	err := grpc.Invoke(ctx, "/grpc_skeleton.Skeleton/GetObject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Skeleton service

type SkeletonServer interface {
	GetObject(context.Context, *Object) (*Object, error)
}

func RegisterSkeletonServer(s *grpc.Server, srv SkeletonServer) {
	s.RegisterService(&_Skeleton_serviceDesc, srv)
}

func _Skeleton_GetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Object)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkeletonServer).GetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_skeleton.Skeleton/GetObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkeletonServer).GetObject(ctx, req.(*Object))
	}
	return interceptor(ctx, in, info, handler)
}

var _Skeleton_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_skeleton.Skeleton",
	HandlerType: (*SkeletonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetObject",
			Handler:    _Skeleton_GetObject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "skeleton.proto",
}

func init() { proto.RegisterFile("skeleton.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 125 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0xce, 0x4e, 0xcd,
	0x49, 0x2d, 0xc9, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4d, 0x2f, 0x2a, 0x48,
	0x8e, 0x87, 0x09, 0x2a, 0xe9, 0x70, 0xb1, 0xf9, 0x27, 0x65, 0xa5, 0x26, 0x97, 0x08, 0xf1, 0x71,
	0x31, 0x65, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x30, 0x07, 0x31, 0x65, 0xa6, 0x08, 0x09, 0x71,
	0xb1, 0xe4, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x29, 0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x46, 0xee,
	0x5c, 0x1c, 0xc1, 0x50, 0x9d, 0x42, 0xd6, 0x5c, 0x9c, 0xee, 0xa9, 0x25, 0x50, 0xcd, 0xa2, 0x7a,
	0x28, 0xc6, 0xea, 0x41, 0x84, 0xa5, 0xb0, 0x0b, 0x2b, 0x31, 0x24, 0xb1, 0x81, 0x1d, 0x63, 0x0c,
	0x08, 0x00, 0x00, 0xff, 0xff, 0xc6, 0xe5, 0x92, 0x21, 0x9e, 0x00, 0x00, 0x00,
}
